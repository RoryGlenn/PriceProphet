/*********************************************************************
 * priceUtils.ts
 *
 * Utility functions for price-related calculations and manipulations.
 * Handles the generation of price choices for the prediction game,
 * providing varied price alternatives within a reasonable range.
 *
 * @module priceUtils
 * @description Price formatting and choice generation utilities for the game
 *********************************************************************/

/**
 * Formats a number as a currency string with consistent formatting.
 * Uses US dollar format with exactly 2 decimal places.
 *
 * @example
 * formatPrice(123.456) // Returns "$123.46"
 * formatPrice(1000) // Returns "$1,000.00"
 *
 * @param {number} price - The numeric price value to format
 * @returns {string} Price formatted as USD with 2 decimal places
 */
export function formatPrice(price: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(price);
}

/**
 * Generates an array of price choices for the prediction game.
 * Creates four price options:
 * 1. The actual future price (correct answer)
 * 2. Three alternative prices within Â±20% of the actual price
 *
 * The alternative prices are generated by applying random percentage changes
 * between -20% and +20% to the actual price. This creates a good balance
 * of challenge while keeping the options within a reasonable range.
 *
 * The position of the correct answer is randomized using the Fisher-Yates
 * shuffle algorithm to ensure unbiased placement.
 *
 * @example
 * generatePriceChoices(100)
 * // Might return: ["$92.15", "$100.00", "$115.32", "$88.76"]
 *
 * @param {number} actualPrice - The actual future price that will occur
 * @returns {string[]} Array of 4 formatted price strings, with the actual price at a random position
 * @throws {Error} If actualPrice is negative or zero
 */
export function generatePriceChoices(actualPrice: number): string[] {
  if (actualPrice <= 0) {
    throw new Error('Actual price must be positive');
  }

  // Format the actual price
  const formattedActual = formatPrice(actualPrice);

  /*
   * Generate three alternative prices by applying random percentage changes
   * between -20% and +20% of the actual price to create challenging options
   */
  const alternatives = [];
  for (let i = 0; i < 3; i++) {
    // Generate random percentage between -20 and +20
    const percentChange = Math.random() * 40 - 20;

    // Apply the change and ensure price stays positive
    const multiplier = 1 + percentChange / 100;
    const altPrice = formatPrice(Math.max(0.01, actualPrice * multiplier));
    alternatives.push(altPrice);
  }

  // Combine actual and alternative prices
  const allPrices = [formattedActual, ...alternatives];

  /*
   * Shuffle the array to randomize the position of the correct answer.
   * We use the Fisher-Yates shuffle algorithm for unbiased randomization.
   */
  for (let i = allPrices.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [allPrices[i], allPrices[j]] = [allPrices[j], allPrices[i]];
  }

  return allPrices;
}
