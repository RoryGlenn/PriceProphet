/*********************************************************************
 * priceUtils.ts
 *
 * Utility functions for price-related calculations and manipulations.
 * Handles the generation of price choices for the prediction game,
 * ensuring realistic and challenging options for players.
 *********************************************************************/

/**
 * Format a number as a currency string with consistent formatting.
 * @param price The price to format
 * @returns Formatted price string
 */
export function formatPrice(price: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(price);
}

/**
 * Generate an array of price choices for the prediction game.
 * Creates four price options:
 * 1. The actual future price (correct answer)
 * 2. Three realistic but incorrect prices
 *
 * The incorrect prices are generated by applying random percentage changes
 * to the actual price, ensuring they're different enough to be challenging
 * but not so different that they're obviously wrong.
 *
 * @param actualPrice The actual future price that will occur
 * @returns Array of price strings, with the actual price at a random position
 */
export function generatePriceChoices(actualPrice: number): string[] {
  // Format the actual price
  const formattedActual = formatPrice(actualPrice);

  /*
   * Generate three alternative prices by applying random percentage changes.
   * We use different ranges for up and down movements to create realistic
   * but challenging options:
   * - Upward changes: 2-5%
   * - Downward changes: 1.5-4%
   */
  const alternatives = [];
  for (let i = 0; i < 3; i++) {
    // Randomly decide if price should be higher or lower
    const isHigher = Math.random() > 0.5;

    // Calculate percentage change
    const percentChange = isHigher
      ? Math.random() * 3 + 2 // 2-5% higher
      : Math.random() * 2.5 + 1.5; // 1.5-4% lower

    // Apply the change
    const multiplier = isHigher ? 1 + percentChange / 100 : 1 - percentChange / 100;

    const altPrice = formatPrice(actualPrice * multiplier);
    alternatives.push(altPrice);
  }

  // Combine actual and alternative prices
  const allPrices = [formattedActual, ...alternatives];

  /*
   * Shuffle the array to randomize the position of the correct answer.
   * We use the Fisher-Yates shuffle algorithm for unbiased randomization.
   */
  for (let i = allPrices.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [allPrices[i], allPrices[j]] = [allPrices[j], allPrices[i]];
  }

  return allPrices;
}
