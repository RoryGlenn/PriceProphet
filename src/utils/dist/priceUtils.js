"use strict";
/*********************************************************************
 * priceUtils.ts
 *
 * Utility functions for price-related calculations and manipulations.
 * Handles the generation of price choices for the prediction game,
 * ensuring realistic and challenging options for players.
 *********************************************************************/
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.generatePriceChoices = exports.formatPrice = void 0;
/**
 * Format a number as a currency string with consistent formatting.
 * @param price The price to format
 * @returns Formatted price string
 */
function formatPrice(price) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(price);
}
exports.formatPrice = formatPrice;
/**
 * Generate an array of price choices for the prediction game.
 * Creates four price options:
 * 1. The actual future price (correct answer)
 * 2. Three realistic but incorrect prices
 *
 * The incorrect prices are generated by applying random percentage changes
 * to the actual price, ensuring they're different enough to be challenging
 * but not so different that they're obviously wrong.
 *
 * @param actualPrice The actual future price that will occur
 * @returns Array of price strings, with the actual price at a random position
 */
function generatePriceChoices(actualPrice) {
    var _a;
    // Format the actual price
    var formattedActual = formatPrice(actualPrice);
    /*
     * Generate three alternative prices by applying random percentage changes.
     * We use different ranges for up and down movements to create realistic
     * but challenging options:
     * - Upward changes: 2-5%
     * - Downward changes: 1.5-4%
     */
    var alternatives = [];
    for (var i = 0; i < 3; i++) {
        // Randomly decide if price should be higher or lower
        var isHigher = Math.random() > 0.5;
        // Calculate percentage change
        var percentChange = isHigher
            ? Math.random() * 3 + 2 // 2-5% higher
            : Math.random() * 2.5 + 1.5; // 1.5-4% lower
        // Apply the change
        var multiplier = isHigher
            ? 1 + percentChange / 100
            : 1 - percentChange / 100;
        var altPrice = formatPrice(actualPrice * multiplier);
        alternatives.push(altPrice);
    }
    // Combine actual and alternative prices
    var allPrices = __spreadArrays([formattedActual], alternatives);
    /*
     * Shuffle the array to randomize the position of the correct answer.
     * We use the Fisher-Yates shuffle algorithm for unbiased randomization.
     */
    for (var i = allPrices.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        _a = [allPrices[j], allPrices[i]], allPrices[i] = _a[0], allPrices[j] = _a[1];
    }
    return allPrices;
}
exports.generatePriceChoices = generatePriceChoices;
